country <- dbReadTable(conn, "countries")
climate <- dbReadTable(conn, "climate_data") |>
filter(city_code %in% no_cc$id)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
utate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
mutate(country_code = unique(country$country_code)) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
mutate(country_code = unique(country$country_code)) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
mutate(country_code = unique(country$country_code)) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
#join on country code
left_join(
cities |> select(id, country_code), by = c("city_code" = "id")
) |>
#tidy up overlapping fields
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
View(climate_rfmt)
#reformat the data ready to run through the function
climate_rfmt <- climate |>
#join on country code
left_join(
cities |> select(id, city_name, country_code), by = c("city_code" = "id")
) |>
#tidy up overlapping fields
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(
metric %in% c("Daily mean", "Average precipitation") &
str_detect(units,"C|mm")
) |>
select(-units) |>
select(-record_no) |>
distinct() |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Daily mean` & !is.na(`Average precipitation`))) |>
#add oin hemisphere
left_join(
country |>
select(country_code, hemisphere),
by = "country_code"
)
#empty list to hold results
results <- list()
#loop
for (c in unique(climate_rfmt$city_code)) {
#filter df
df <- climate_rfmt |> filter(city_code == c)
#city name
city <- unique(df$city_name)
#ktc class
ktc_class <- get_ktc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#kgc class
kgc_class <- get_kgc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#convert ktc/kgc to number
ktc_num <- class_lookup |>
filter(classification_id == 1 & class_code == ktc_class) |>
pull(class_id) |>
as.numeric()
kgc_num <- class_lookup |>
filter(classification_id == 2 & class_code == kgc_class) |>
pull(class_id) |>
as.numeric()
#update list
results[match(c, unique(climate_rfmt$city_code))] <- data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(city_id, 2),
"city_name" = rep(city, 2)
)
}
class_lookup <- dbReadTable(conn, "climate_class")
#empty list to hold results
results <- list()
#loop
for (c in unique(climate_rfmt$city_code)) {
#filter df
df <- climate_rfmt |> filter(city_code == c)
#city name
city <- unique(df$city_name)
#ktc class
ktc_class <- get_ktc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#kgc class
kgc_class <- get_kgc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#convert ktc/kgc to number
ktc_num <- class_lookup |>
filter(classification_id == 1 & class_code == ktc_class) |>
pull(class_id) |>
as.numeric()
kgc_num <- class_lookup |>
filter(classification_id == 2 & class_code == kgc_class) |>
pull(class_id) |>
as.numeric()
#update list
results[match(c, unique(climate_rfmt$city_code))] <- data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(city_id, 2),
"city_name" = rep(city, 2)
)
}
#empty list to hold results
results <- list()
#loop
for (c in unique(climate_rfmt$city_code)) {
#filter df
df <- climate_rfmt |> filter(city_code == c)
#city name
city <- unique(df$city_name)
#ktc class
ktc_class <- get_ktc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#kgc class
kgc_class <- get_kgc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#convert ktc/kgc to number
ktc_num <- class_lookup |>
filter(classification_id == 1 & class_code == ktc_class) |>
pull(class_id) |>
as.numeric()
kgc_num <- class_lookup |>
filter(classification_id == 2 & class_code == kgc_class) |>
pull(class_id) |>
as.numeric()
#update list
results[match(c, unique(climate_rfmt$city_code))] <- data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(c, 2),
"city_name" = rep(city, 2)
)
}
results_df <- bind_rows(results)
results_df <- results |> bind_rows()
View(results)
data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(c, 2),
"city_name" = rep(city, 2)
)
#empty list to hold results
results <- list()
#loop
for (c in unique(climate_rfmt$city_code)) {
#filter df
df <- climate_rfmt |> filter(city_code == c)
#city name
city <- unique(df$city_name)
#ktc class
ktc_class <- get_ktc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#kgc class
kgc_class <- get_kgc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#convert ktc/kgc to number
ktc_num <- class_lookup |>
filter(classification_id == 1 & class_code == ktc_class) |>
pull(class_id) |>
as.numeric()
kgc_num <- class_lookup |>
filter(classification_id == 2 & class_code == kgc_class) |>
pull(class_id) |>
as.numeric()
# 'upload' df
upload_df <- data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(c, 2),
"city_name" = rep(city, 2)
)
#update list
results[match(c, unique(climate_rfmt$city_code))] <- upload_df
}
results_df <- results |> bind_rows()
View(results)
#empty list to hold results
results <- list()
#loop
for (c in unique(climate_rfmt$city_code)) {
#filter df
df <- climate_rfmt |> filter(city_code == c)
#city name
city <- unique(df$city_name)
#ktc class
ktc_class <- get_ktc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#kgc class
kgc_class <- get_kgc_class(
df,
month,
`Daily mean`,
`Average precipitation`,
hemisphere
)
#convert ktc/kgc to number
ktc_num <- class_lookup |>
filter(classification_id == 1 & class_code == ktc_class) |>
pull(class_id) |>
as.numeric()
kgc_num <- class_lookup |>
filter(classification_id == 2 & class_code == kgc_class) |>
pull(class_id) |>
as.numeric()
# 'upload' df
upload_df <- data.frame(
"class_id" = c(ktc_num, kgc_num),
"city_id" = rep(c, 2),
"city_name" = rep(city, 2)
)
#update list
results[[match(c, unique(climate_rfmt$city_code))]] <- upload_df
}
results_df <- results |> bind_rows()
View(results_df)
#upload
dbAppendTable(conn, "classes_per_city", results_df |> select(-city_name))
View(no_cc)
shiny::runApp()
runApp()
runApp()
#read in functions that may be useful----------
source("R/functions.R")
#packages that may be useful-------------------
library(DBI)
library(RSQLite)
library(tidyverse)
#connect
conn <- connect_to_db()
#read tables
tables <- lapply(
dbListTables(conn),
dbReadTable,
conn = conn
)
names(tables) <- dbListTables(conn)
tables[["climate_data"]] <- tables[["climate_data"]] |>
#step 1: standardise precipitation/rainfall
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
select(-record_no) |>
distinct() |>
#step 2: standardise sunshine data
mutate(
value = case_when(
str_detect(metric, "daily sun") &
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31 * value,
str_detect(metric, "daily sun") &
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30 * value,
str_detect(metric, "daily sun") & month == "Feb" ~ 28 * value,
TRUE ~ value
),
metric = case_when(
str_detect(metric, "daily sun") ~ "Mean monthly sunshine",
TRUE ~ metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = TRUE)) |>
ungroup() |>
distinct()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / sum(days, na.rm = TRUE)
) |>
ungroup() |>
#tall format
pivot_longer(
cols = c(max:mean),
names_to = "stat",
values_to = "summary_value"
) |>
#only relevant/sensible combos
filter(
(metric == "Record high" & stat == "max") |
(metric == "Record low" & stat == "min") |
(units %in% c("hours", "mm", "inches", "days") & stat == "total") |
(str_detect(units, "C|F") & !str_detect(metric, "Record") & stat == "mean")
)
climate_classes <- tables[["cities"]] |>
select(id) |>
#classifications where available
inner_join(tables[["classes_per_city"]], by = c("id" = "city_id")) |>
#classification description
left_join(tables[["climate_class"]], by = "class_id") |>
#class systen
left_join(tables[["classifications"]], by = c("classification_id" = "class_id"))
city_list <- tables[["cities"]] |>
#join country data
left_join(tables[["countries"]], by = c("country_code" = "country_code")) |>
#create labels
mutate(ui_label = paste0(city_name, " (", name, ")"))
metrics <- tables[["climate_data"]] |>
mutate(ui_label = paste0(metric, " (", units, ")"))
shiny::runApp()
rlang::last_error()
runApp()
runApp()
View(ann_summaries)
unique(ann_summaries$units)
runApp()
runApp()
shiny::runApp()
