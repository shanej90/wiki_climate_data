) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp)
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !matches(regex("Month")), names_to = "metric", values_to = "value")
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value")
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
across(
.cols = starts_with("Month"),
.fns = ~.x != "Month"
)
)
#wrangle the climate df
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
if_any(starts_with("Month"), ~.x != "Year")
) |>
#get units
mutate(
units_1 = case_when(
str_detect(metric, "\\°") ~ word(metric, 3),
str_detect(metric, "rain|precip") & str_detect(metric, "mm|inch") & !str_detect(metric, "days") ~ word(metric, 3),
str_detect(metric, "days") ~ "days",
str_detect(metric, regex("humidity|percent", ignore_case = T)) ~ "%",
str_detect(metric, "hour") ~ "hours"
),
units_2 = case_when(
str_detect(metric, "\\°") ~ word(metric, 4),
str_detect(metric, "rainfall|precip") & str_detect(metric, "mm|inch") ~ word(metric, 4)
),
value_2 = str_extract(value, "(?<=\\()(.*)(?=\\))"),
value_1 = str_remove(value, "(?<=\\()(.*)(?=\\))") |> str_remove_all("\\(|\\)")
) |>
mutate(across(contains("unit"), function(x) str_remove_all(x, "\\(|\\)"))) |>
select(-value) |>
#rename metric column for clarity
mutate(
metric = str_remove_all(
metric, "\\(|\\)|\\°F|\\°C|mm|inches|hours||days|Percent|percent"
)
) |>
#sort out values and units
pivot_longer(
cols = c(units_1:value_1),
names_to = "temp",
values_to = "temp_values"
) |>
separate(
temp,
into = c("temp1", "temp2"),
sep = "_"
) |>
pivot_wider(names_from = temp1, values_from = temp_values) |>
select(-temp2) |>
#tidy up data
mutate(
time_period = timeband,
value = ifelse(is.na(as.numeric(value)), -as.numeric(substr(value, 2, length(value))), as.numeric(value))
) |>
#standardise metrics/variables
mutate(
metric = str_trim(metric, side = "both"),
metric = case_when(
str_detect(metric, "rainy days|precipitation days") | (str_detect(metric, "rainy|precipitation") & str_detect(metric, "days")) ~
"Average precipitation/rainfall days",
str_detect(metric, "humidity") ~ "Humidity",
TRUE ~ metric
)
) |>
filter(!is.na(units)) |>
transmute(
city_code = city,
month = Month,
metric,
units,
value,
time_period
) |>
filter(!is.na(value)) |>
distinct()
#filtering function
filt_func <- function(x) {
x != "Month"
}
#wrangle the climate df
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
if_any(starts_with("Month"), filt_func)
) |>
#get units
mutate(
units_1 = case_when(
str_detect(metric, "\\°") ~ word(metric, 3),
str_detect(metric, "rain|precip") & str_detect(metric, "mm|inch") & !str_detect(metric, "days") ~ word(metric, 3),
str_detect(metric, "days") ~ "days",
str_detect(metric, regex("humidity|percent", ignore_case = T)) ~ "%",
str_detect(metric, "hour") ~ "hours"
),
units_2 = case_when(
str_detect(metric, "\\°") ~ word(metric, 4),
str_detect(metric, "rainfall|precip") & str_detect(metric, "mm|inch") ~ word(metric, 4)
),
value_2 = str_extract(value, "(?<=\\()(.*)(?=\\))"),
value_1 = str_remove(value, "(?<=\\()(.*)(?=\\))") |> str_remove_all("\\(|\\)")
) |>
mutate(across(contains("unit"), function(x) str_remove_all(x, "\\(|\\)"))) |>
select(-value) |>
#rename metric column for clarity
mutate(
metric = str_remove_all(
metric, "\\(|\\)|\\°F|\\°C|mm|inches|hours||days|Percent|percent"
)
) |>
#sort out values and units
pivot_longer(
cols = c(units_1:value_1),
names_to = "temp",
values_to = "temp_values"
) |>
separate(
temp,
into = c("temp1", "temp2"),
sep = "_"
) |>
pivot_wider(names_from = temp1, values_from = temp_values) |>
select(-temp2) |>
#tidy up data
mutate(
time_period = timeband,
value = ifelse(is.na(as.numeric(value)), -as.numeric(substr(value, 2, length(value))), as.numeric(value))
) |>
#standardise metrics/variables
mutate(
metric = str_trim(metric, side = "both"),
metric = case_when(
str_detect(metric, "rainy days|precipitation days") | (str_detect(metric, "rainy|precipitation") & str_detect(metric, "days")) ~
"Average precipitation/rainfall days",
str_detect(metric, "humidity") ~ "Humidity",
TRUE ~ metric
)
) |>
filter(!is.na(units)) |>
transmute(
city_code = city,
month = Month,
metric,
units,
value,
time_period
) |>
filter(!is.na(value)) |>
distinct()
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
if_any(starts_with("Month"), filt_func)
)
View(climate_df)
#fix for if months are header rather than first row
if("Month" %in% colnames(climate_df)) {
first_row <- colnames(climate_df)
climate_df <- bind_rows(first_row, climate_df)
}
first_row <- colnames(climate_df)
#read page
html <- read_html(.url)
#get tables
all_tbls <- html_nodes(html, "table")
climate_tbl <- all_tbls[grep("climate data", all_tbls, ignore.case = T)]
climate_df <- html_table(climate_tbl[[1]]) #always take the first one
#fix for if months are header rather than first row
if("Month" %in% colnames(climate_df)) {
first_row <- colnames(climate_df)
names(first_row) <- colnames(climate_df)
climate_df <- bind_rows(first_row, climate_df)
}
View(climate_df)
#extract the timeframe
timeband <- colnames(climate_df)[1] |>
str_extract("[1-2][0-9][0-9][0-9]–[1-2][0-9][0-9][0-9]")
#new names for columns, ensure consistency
new_names <- paste0("col_", c(1:length(colnames(climate_df))))
#wrangle the climate df
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
if_any(starts_with("Month"), filt_func)
) |>
#get units
mutate(
units_1 = case_when(
str_detect(metric, "\\°") ~ word(metric, 3),
str_detect(metric, "rain|precip") & str_detect(metric, "mm|inch") & !str_detect(metric, "days") ~ word(metric, 3),
str_detect(metric, "days") ~ "days",
str_detect(metric, regex("humidity|percent", ignore_case = T)) ~ "%",
str_detect(metric, "hour") ~ "hours"
),
units_2 = case_when(
str_detect(metric, "\\°") ~ word(metric, 4),
str_detect(metric, "rainfall|precip") & str_detect(metric, "mm|inch") ~ word(metric, 4)
),
value_2 = str_extract(value, "(?<=\\()(.*)(?=\\))"),
value_1 = str_remove(value, "(?<=\\()(.*)(?=\\))") |> str_remove_all("\\(|\\)")
) |>
mutate(across(contains("unit"), function(x) str_remove_all(x, "\\(|\\)"))) |>
select(-value) |>
#rename metric column for clarity
mutate(
metric = str_remove_all(
metric, "\\(|\\)|\\°F|\\°C|mm|inches|hours||days|Percent|percent"
)
) |>
#sort out values and units
pivot_longer(
cols = c(units_1:value_1),
names_to = "temp",
values_to = "temp_values"
) |>
separate(
temp,
into = c("temp1", "temp2"),
sep = "_"
) |>
pivot_wider(names_from = temp1, values_from = temp_values) |>
select(-temp2) |>
#tidy up data
mutate(
time_period = timeband,
value = ifelse(is.na(as.numeric(value)), -as.numeric(substr(value, 2, length(value))), as.numeric(value))
) |>
#standardise metrics/variables
mutate(
metric = str_trim(metric, side = "both"),
metric = case_when(
str_detect(metric, "rainy days|precipitation days") | (str_detect(metric, "rainy|precipitation") & str_detect(metric, "days")) ~
"Average precipitation/rainfall days",
str_detect(metric, "humidity") ~ "Humidity",
TRUE ~ metric
)
) |>
filter(!is.na(units)) |>
transmute(
city_code = city,
month = Month,
metric,
units,
value,
time_period
) |>
filter(!is.na(value)) |>
distinct()
wrangled <- climate_df |>
stats::setNames(new_names) |>
#relevant rows
filter(
str_detect(col_1, "Month|maximum|minimum|mean|precipitation|rain|humidity|sunshine|high|low") &
!str_detect(col_1, "Source")
) |>
#tall
pivot_longer(
cols = -col_1,
names_to = "temp",
values_to = "values"
) |>
#temproarily back to wide
pivot_wider(names_from = col_1, values_from = "values") |>
#remove extraneous column
select(-temp) |>
#taller format
pivot_longer(cols = !starts_with("Month"), names_to = "metric", values_to = "value") |>
#remove annual total/average
filter(
if_any(starts_with("Month"), filt_func)
) |>
#get units
mutate(
units_1 = case_when(
str_detect(metric, "\\°") ~ word(metric, 3),
str_detect(metric, "rain|precip") & str_detect(metric, "mm|inch") & !str_detect(metric, "days") ~ word(metric, 3),
str_detect(metric, "days") ~ "days",
str_detect(metric, regex("humidity|percent", ignore_case = T)) ~ "%",
str_detect(metric, "hour") ~ "hours"
),
units_2 = case_when(
str_detect(metric, "\\°") ~ word(metric, 4),
str_detect(metric, "rainfall|precip") & str_detect(metric, "mm|inch") ~ word(metric, 4)
),
value_2 = str_extract(value, "(?<=\\()(.*)(?=\\))"),
value_1 = str_remove(value, "(?<=\\()(.*)(?=\\))") |> str_remove_all("\\(|\\)")
) |>
mutate(across(contains("unit"), function(x) str_remove_all(x, "\\(|\\)"))) |>
select(-value) |>
#rename metric column for clarity
mutate(
metric = str_remove_all(
metric, "\\(|\\)|\\°F|\\°C|mm|inches|hours||days|Percent|percent"
)
) |>
#sort out values and units
pivot_longer(
cols = c(units_1:value_1),
names_to = "temp",
values_to = "temp_values"
) |>
separate(
temp,
into = c("temp1", "temp2"),
sep = "_"
) |>
pivot_wider(names_from = temp1, values_from = temp_values) |>
select(-temp2) |>
#tidy up data
mutate(
time_period = timeband,
value = ifelse(is.na(as.numeric(value)), -as.numeric(substr(value, 2, length(value))), as.numeric(value))
) |>
#standardise metrics/variables
mutate(
metric = str_trim(metric, side = "both"),
metric = case_when(
str_detect(metric, "rainy days|precipitation days") | (str_detect(metric, "rainy|precipitation") & str_detect(metric, "days")) ~
"Average precipitation/rainfall days",
str_detect(metric, "humidity") ~ "Humidity",
TRUE ~ metric
)
)
#import functon
source("R/functions.R")
#packages
library(DBI)
library(janitor)
library(rvest)
library(RSQLite)
library(tidyverse)
urls <- read.csv("data/urls_to_upload.csv", header = F) |>
as.vector() |>
unlist()
for (u in urls) {
full_data_upload(u)
}
.url <- "https://en.wikipedia.org/wiki/San_Juan"
#read page
html <- read_html(.url)
library(tidyverse)
library(rvest)
#read page
html <- read_html(.url)
#get h1
title <- html |> html_nodes("#firstHeading") |> html_text()
#get coordinates
latitude <- html |> html_nodes(".latitude") |> html_text() |> unique()
longitude <- html |> html_nodes(".longitude") |> html_text() |> unique()
#import functon
source("R/functions.R")
#packages
library(DBI)
library(janitor)
library(rvest)
library(RSQLite)
library(tidyverse)
urls <- read.csv("data/urls_to_upload.csv", header = F) |>
as.vector() |>
unlist()
for (u in urls) {
full_data_upload(u)
}
for (u in urls) {
full_data_upload(u)
}
#import functon
source("R/functions.R")
for (u in urls) {
full_data_upload(u)
}
shiny::runApp()
