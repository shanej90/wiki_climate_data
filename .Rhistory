source("R/functions.R")
#packages that may be useful-------------------
library(DBI)
library(RSQLite)
library(tidyverse)
dbListTables(conn)
#connect
conn <- connect_to_db()
dbListTables(conn)
#read tables
tables <- lapply(
dbListTables(conn),
dbReadTable,
conn = conn
)
names(tables)
names(tables) <- dbListTables(conn)
names(tables)
View(tables[["climate_data"]])
sunshine <- tables[["climate_data"]] |>
filter(str_detect(metric, "sun|Sun")) |>
distinct(metric, units)
View(sunshine)
unique(tables[["climate_data"]][["metric"]])
tables[["climate_data"]] <- tables[["climate_data"]] |>
#step 1: standardise precipitation/rainfall
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
select(-record_no) |>
distinct() |>
#step 2: standardise sunshine data
mutate(
value = case_when(
str_detect(metric, "daily sun") &
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31 * value,
str_detect(metric, "daily sun") &
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30 * value,
str_detect(metric, "daily sun") & month == "Feb" ~ 28 * value,
TRUE ~ value
),
metric = case_when(
str_detect(metric, "daily sun") ~ "Mean monthly sunshine",
TRUE ~ metric
)
)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
)
View(ann_summaries)
#read tables
tables <- lapply(
dbListTables(conn),
dbReadTable,
conn = conn
)
names(tables) <- dbListTables(conn)
tables[["climate_data"]] <- tables[["climate_data"]] |>
#step 1: standardise precipitation/rainfall
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
select(-record_no) |>
distinct() |>
#step 2: standardise sunshine data
mutate(
value = case_when(
str_detect(metric, "daily sun") &
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31 * value,
str_detect(metric, "daily sun") &
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30 * value,
str_detect(metric, "daily sun") & month == "Feb" ~ 28 * value,
TRUE ~ value
),
metric = case_when(
str_detect(metric, "daily sun") ~ "Mean monthly sunshine",
TRUE ~ metric
)
)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, month, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_value, na.rm = TRUE) / 12
) |>
ungroup()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, month, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / 12
) |>
ungroup()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, month, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / 12
) |>
ungroup() |>
mutate(month_num = match(month, month.abb)) |>
arrange(city_code, metric, month_num, units)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / 12
) |>
ungroup() |>
mutate(month_num = match(month, month.abb)) |>
arrange(city_code, metric, month_num, units)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / 12
) |>
ungroup()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / sum(days, na.rm = TRUE)
) |>
ungroup()
#read tables
tables <- lapply(
dbListTables(conn),
dbReadTable,
conn = conn
)
names(tables) <- dbListTables(conn)
tables[["climate_data"]] <- tables[["climate_data"]] |>
#step 1: standardise precipitation/rainfall
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
select(-record_no) |>
distinct() |>
#step 2: standardise sunshine data
mutate(
value = case_when(
str_detect(metric, "daily sun") &
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31 * value,
str_detect(metric, "daily sun") &
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30 * value,
str_detect(metric, "daily sun") & month == "Feb" ~ 28 * value,
TRUE ~ value
),
metric = case_when(
str_detect(metric, "daily sun") ~ "Mean monthly sunshine",
TRUE ~ metric
)
) |>
distinct()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / sum(days, na.rm = TRUE)
) |>
ungroup()
#read tables
tables <- lapply(
dbListTables(conn),
dbReadTable,
conn = conn
)
names(tables) <- dbListTables(conn)
tables[["climate_data"]] <- tables[["climate_data"]] |>
#step 1: standardise precipitation/rainfall
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
select(-record_no) |>
distinct() |>
#step 2: standardise sunshine data
mutate(
value = case_when(
str_detect(metric, "daily sun") &
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31 * value,
str_detect(metric, "daily sun") &
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30 * value,
str_detect(metric, "daily sun") & month == "Feb" ~ 28 * value,
TRUE ~ value
),
metric = case_when(
str_detect(metric, "daily sun") ~ "Mean monthly sunshine",
TRUE ~ metric
)
) |>
group_by(city_code, month, metric, units) |>
filter(value == max(value, na.rm = TRUE)) |>
ungroup() |>
distinct()
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / sum(days, na.rm = TRUE)
) |>
ungroup()
View(ann_summaries)
unique(ann_summaries$units)
ann_summaries <- tables[["climate_data"]] |>
#include number of days for calculations where required
mutate(
days = case_when(
month %in% c("Jan", "Mar", "May", "Jul", "Aug", "Oct", "Dec") ~ 31,
month %in% c("Apr", "Jun", "Sep", "Nov") ~ 30,
month == "Feb" ~ 28
),
weighted_values = days * value
) |>
#summarise
group_by(city_code, metric, units, time_period) |>
summarise(
max = max(value, na.rm = TRUE),
min = min(value, na.rm = TRUE),
total = sum(value, na.rm = TRUE),
mean = sum(weighted_values, na.rm = TRUE) / sum(days, na.rm = TRUE)
) |>
ungroup() |>
#tall format
pivot_longer(
cols = c(max:mean),
names_to = "stat",
values_to = "summary_value"
) |>
#only relevant/sensible combos
filter(
(metric == "Record high" & stat == "max") |
(metric == "Record low" & stat == "min") |
(units %in% c("hours", "mm", "inches", "days") & stat == "total") |
(str_detect(units, "C|F") & !str_detect(metric, "Record") & stat == "mean")
)
climate_classes <- tables[["cities"]] |>
select(id, city_name, country_code) |>
#classifications where available
inner_join(tables[["classes_per_city"]], by = c("id" = "city_id")) |>
#classification description
left_join(tables[["climate_class"]], by = "class_id") |>
#class systen
left_join(tables[["classifications"]], by = c("classification_id" = "class_id"))
View(climate_classes)
climate_classes <- tables[["cities"]] |>
select(id) |>
#classifications where available
inner_join(tables[["classes_per_city"]], by = c("id" = "city_id")) |>
#classification description
left_join(tables[["climate_class"]], by = "class_id") |>
#class systen
left_join(tables[["classifications"]], by = c("classification_id" = "class_id"))
View(tables)
#import functon
source("R/functions.R")
#packages
library(DBI)
library(janitor)
library(rvest)
library(RSQLite)
library(tidyverse)
urls <- read.csv("data/urls_to_upload.csv", header = F) |>
as.vector() |>
unlist()
for (u in urls) {
full_data_upload(u)
}
#packages----------------
library(DBI)
library(tidyverse)
#source functions--------------
source("R/functions.R")
#connect-----------------
conn <- connect_to_db()
#cities
cities <- dbReadTable(conn, "cities")
#classifications per city
cpc <- dbReadTable(conn, "classes_per_city")
#classification types
classes <- dbReadTable(conn, "climate_class")
#class types
class_types <- dbReadTable(conn, "classifications")
#countries
countries <- dbReadTable(conn, "countries")
classData <- cities |>
select(id, city_name, country_code) |>
#join on pertinent country data
left_join(
countries |>
transmute(country_code, country = name),
by = "country_code"
) |>
#classifications where available
inner_join(cpc, by = c("id" = "city_id")) |>
#classification description
left_join(classes, by = "class_id") |>
#class systen
left_join(class_types, by = c("classification_id" = "class_id"))
clipr::write_clip(classData)
#packages----------------
library(DBI)
library(tidyverse)
#source functions--------------
source("R/functions.R")
#connect-----------------
conn <- connect_to_db()
#cities
cities <- dbReadTable(conn, "cities")
#classifications per city
cpc <- dbReadTable(conn, "classes_per_city")
#classification types
classes <- dbReadTable(conn, "climate_class")
#class types
class_types <- dbReadTable(conn, "classifications")
#countries
countries <- dbReadTable(conn, "countries")
classData <- cities |>
select(id, city_name, country_code) |>
#join on pertinent country data
left_join(
countries |>
transmute(country_code, country = name),
by = "country_code"
) |>
#classifications where available
inner_join(cpc, by = c("id" = "city_id")) |>
#classification description
left_join(classes, by = "class_id") |>
#class systen
left_join(class_types, by = c("classification_id" = "class_id"))
clipr::write_clip(classData)
shiny::runApp()
runApp()
View(tables)
View(metrics)
runApp()
runApp()
runApp()
month.abb
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
#import functon
source("R/functions.R")
#packages
library(DBI)
library(janitor)
library(rvest)
library(RSQLite)
library(tidyverse)
urls <- read.csv("data/urls_to_upload.csv", header = F) |>
as.vector() |>
unlist()
for (u in urls) {
full_data_upload(u)
}
for (u in urls) {
full_data_upload(u)
}
shiny::runApp()
shiny::runApp()
View(ann_summaries)
runApp()
