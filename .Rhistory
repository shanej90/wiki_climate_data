corr_plot <- corrPlot(variables$cos2, is.corr = F)
corr_plot <- corrplot(variables$cos2, is.corr = F)
biplot <- fviz_pca_biplot(pca)
biplot
biplot <- fviz_pca_var(pca)
biplot
loading_plot <- fviz_pca_var(pca)
contribution_plot <- fviz_pca_contrib(pca, "var")
contribution_plot <- fviz_contrib(pca, "var")
contribution_plot
?fviz_contrib
contribution_plot <- fviz_contrib(pca, "var", axes = 2)
contribution_plot
library(factoextra)
library(corrplot)
testy <- read.csv("data/initial_loads/scraped_data.csv")
testy_wide <- testy |>
group_by(city, metric) |>
summarise(value = mean(value, na.rm = T)) |>
ungroup() |>
filter(metric %in% c("Daily mean", "Average precipitation", "Mean monthly sunshine")) |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Average precipitation`) & !is.na(`Daily mean`) & !is.na(`Mean monthly sunshine`))
library(tidyverse)
testy_wide <- testy |>
group_by(city, metric) |>
summarise(value = mean(value, na.rm = T)) |>
ungroup() |>
filter(metric %in% c("Daily mean", "Average precipitation", "Mean monthly sunshine")) |>
pivot_wider(names_from = metric, values_from = value) |>
filter(!is.na(`Average precipitation`) & !is.na(`Daily mean`) & !is.na(`Mean monthly sunshine`))
#run the pca---------------------------------------------
#pca
pca <- prcomp(testy_wide |> select(-city), center = TRUE, scale = TRUE)
summary(pca)
pca$center
eig_val <- get_eigenvalue(pca)
variables <- get_pca_var(pca) #coord attribute
loading_plot <- fviz_pca_var(pca)
loading_plot
#contribution of each dimnesion to each pc
contribution_plot <- fviz_contrib(pca, "var", axes = 2) # axes means which component
#contribution of each dimnesion to each pc
contribution_plot <- fviz_contrib(pca, "var", axes = 2) # axes means which component
#biplot
biplot <- fviz_pca_ind(pca, geom.ind = "point", addEllipses = T)
pilot
biplot
data <- read.csv("data/initial_loads/scraped_data.csv")
#packages------------------------
library(tidyverse)
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct()
#packages------------------------
library(factoextra)
install.packages("factoextra")
View(data)
#packages------------------------
library(factoextra)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
)
#seasonal adjustmenets for southern hemisphere
seasonal_adj <- read.csv("data/season_adjustments.csv", stringsAsFactors = F)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
)
View(data)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#wide format
pivot_wider(values_from = value, names_from = metric)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#wide format
pivot_wider(values_from = value, names_from = metric) |>
select(-c(Month, hemisphere, time_period, country))
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-Month, city, time_period, country, hemisphere) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric))
#data for kmeans analysis
for_analysis <- select(data, - city) |>
scale()
for_analysis <- select(data, - city)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, city, time_period, country, hemisphere)) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric))
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, city, time_period, country, hemisphere))
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, time_period, country, hemisphere)) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric))
#data for kmeans analysis
for_analysis <- select(data, - city) |>
scale()
#k means
km <- kmeans(for_analysis, centers = 2, nstart = 25)
#data for kmeans analysis
for_analysis <- select(data, - city) |>
scale() |>
omit.na()
#data for kmeans analysis
for_analysis <- select(data, - city) |>
scale() |>
na.omit()
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, time_period, country, hemisphere)) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric)) |>
na.omit()
#data for kmeans analysis
for_analysis <- select(data, - city) |>
scale()
#k means
km <- kmeans(for_analysis, centers = 2, nstart = 25)
#k means
km <- kmeans(for_analysis, centers = 6, nstart = 25)
#data for kmeans analysis
for_analysis <- data |>
mutate(across(is.numeric, scale))
#data for kmeans analysis
for_analysis <- data |>
mutate(across(where(is.numeric), scale))
#k means
km <- kmeans(for_analysis, centers = 6, nstart = 25)
View(for_analysis)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, time_period, country, hemisphere)) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric)) |>
na.omit()
#data for kmeans analysis
for_analysis <- data |>
mutate(across(where(is.numeric), scale))
View(for_analysis)
for_analysis <- scale(for_analysis)
mtcars
#data for kmeans analysis
rownames(data) <- data$city
#data for kmeans analysis
for_analysis <- as.data.frame(data |> select(-city))
rownames(for_analysis) <- data$city
#data for kmeans analysis
for_analysis <- as.data.frame(data |> select(-city)) |> scale()
rownames(for_analysis) <- data$city
#k means
km <- kmeans(for_analysis, centers = 6, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 5, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 4, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 5, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 7, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 6, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#packages------------------------
library(factoextra)
library(tidyverse)
#seasonal adjustmenets for southern hemisphere
seasonal_adj <- read.csv("data/season_adjustments.csv", stringsAsFactors = F)
#actual data
data <- read.csv("data/initial_loads/scraped_data.csv") |>
#sort out where both rainfall and precipitation included
mutate(
metric = ifelse(
metric %in% c("Average rainfall", "Average precipitation"),
"Average precipitation",
metric
)
) |>
group_by(city, Month, metric, units) |>
filter(value == max(value, na.rm = T)) |>
ungroup() |>
#only relevant classifications, in C/mm
filter(metric %in% c("Daily mean", "Average precipitation") & units %in% c("°C", "mm")) |>
select(-units) |>
distinct() |>
#make seasonal adjustments
left_join(
seasonal_adj,
by = c("hemisphere", "Month" = "month")
) |>
#dop columns not used
select(-c(Month, time_period, country, hemisphere)) |>
#wide format
pivot_wider(values_from = value, names_from = c(adjusted_month,metric)) |>
na.omit()
#data for kmeans analysis
for_analysis <- as.data.frame(data |> select(-city)) |> scale()
rownames(for_analysis) <- data$city
#k means
km <- kmeans(for_analysis, centers = 6, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
#k means
km <- kmeans(for_analysis, centers = 4, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
#k means
km <- kmeans(for_analysis, centers = 5, nstart = 25)
#visualisation
plot <- fviz_cluster(km, data = for_analysis)
plot
library(DBI)
url <- "https://en.wikipedia.org/wiki/Santiago"
#read page
html <- read_html(url)
library(tidyverse)
library(rvest)
#read page
html <- read_html(url)
#get h1
title <- html |> html_nodes("#firstHeading") |> html_text()
#grab country
country <- html |>
html_nodes(".infobox") |>
html_table() |>
as.data.frame() |>
setNames(c("x1", "x2")) |>
filter(x1 == "Country") |>
pull(x2)
#country html
country_html <- read_html(paste0("https://en.wikipedia.org/wiki/", country))
#get country alpha2 from infobox
country_iso2 <- country_html |>
html_nodes(".infobox") |>
html_table() |>
as.data.frame() |>
setNames(c("x1", "x2")) |>
filter(x1 == "ISO 3166 code") |>
pull(x2)
#final dataframe
df <- as.data.frame(
"city_name" = title,
"alpha2" = country_iso2
)
#final dataframe
df <- data.frame(
"city_name" = title,
"alpha2" = country_iso2
)
View(df)
library(keyring)
key_list()
